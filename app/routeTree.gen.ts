/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WhackAMoleImport } from './routes/whack-a-mole'
import { Route as TrafficLightImport } from './routes/traffic-light'
import { Route as TicTacToeImport } from './routes/tic-tac-toe'
import { Route as StopwatchImport } from './routes/stopwatch'
import { Route as RockPaperScissorsImport } from './routes/rock-paper-scissors'
import { Route as QuoteImport } from './routes/quote'
import { Route as GradientImport } from './routes/gradient'
import { Route as DiceImport } from './routes/dice'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const WhackAMoleRoute = WhackAMoleImport.update({
  id: '/whack-a-mole',
  path: '/whack-a-mole',
  getParentRoute: () => rootRoute,
} as any)

const TrafficLightRoute = TrafficLightImport.update({
  id: '/traffic-light',
  path: '/traffic-light',
  getParentRoute: () => rootRoute,
} as any)

const TicTacToeRoute = TicTacToeImport.update({
  id: '/tic-tac-toe',
  path: '/tic-tac-toe',
  getParentRoute: () => rootRoute,
} as any)

const StopwatchRoute = StopwatchImport.update({
  id: '/stopwatch',
  path: '/stopwatch',
  getParentRoute: () => rootRoute,
} as any)

const RockPaperScissorsRoute = RockPaperScissorsImport.update({
  id: '/rock-paper-scissors',
  path: '/rock-paper-scissors',
  getParentRoute: () => rootRoute,
} as any)

const QuoteRoute = QuoteImport.update({
  id: '/quote',
  path: '/quote',
  getParentRoute: () => rootRoute,
} as any)

const GradientRoute = GradientImport.update({
  id: '/gradient',
  path: '/gradient',
  getParentRoute: () => rootRoute,
} as any)

const DiceRoute = DiceImport.update({
  id: '/dice',
  path: '/dice',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dice': {
      id: '/dice'
      path: '/dice'
      fullPath: '/dice'
      preLoaderRoute: typeof DiceImport
      parentRoute: typeof rootRoute
    }
    '/gradient': {
      id: '/gradient'
      path: '/gradient'
      fullPath: '/gradient'
      preLoaderRoute: typeof GradientImport
      parentRoute: typeof rootRoute
    }
    '/quote': {
      id: '/quote'
      path: '/quote'
      fullPath: '/quote'
      preLoaderRoute: typeof QuoteImport
      parentRoute: typeof rootRoute
    }
    '/rock-paper-scissors': {
      id: '/rock-paper-scissors'
      path: '/rock-paper-scissors'
      fullPath: '/rock-paper-scissors'
      preLoaderRoute: typeof RockPaperScissorsImport
      parentRoute: typeof rootRoute
    }
    '/stopwatch': {
      id: '/stopwatch'
      path: '/stopwatch'
      fullPath: '/stopwatch'
      preLoaderRoute: typeof StopwatchImport
      parentRoute: typeof rootRoute
    }
    '/tic-tac-toe': {
      id: '/tic-tac-toe'
      path: '/tic-tac-toe'
      fullPath: '/tic-tac-toe'
      preLoaderRoute: typeof TicTacToeImport
      parentRoute: typeof rootRoute
    }
    '/traffic-light': {
      id: '/traffic-light'
      path: '/traffic-light'
      fullPath: '/traffic-light'
      preLoaderRoute: typeof TrafficLightImport
      parentRoute: typeof rootRoute
    }
    '/whack-a-mole': {
      id: '/whack-a-mole'
      path: '/whack-a-mole'
      fullPath: '/whack-a-mole'
      preLoaderRoute: typeof WhackAMoleImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dice': typeof DiceRoute
  '/gradient': typeof GradientRoute
  '/quote': typeof QuoteRoute
  '/rock-paper-scissors': typeof RockPaperScissorsRoute
  '/stopwatch': typeof StopwatchRoute
  '/tic-tac-toe': typeof TicTacToeRoute
  '/traffic-light': typeof TrafficLightRoute
  '/whack-a-mole': typeof WhackAMoleRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dice': typeof DiceRoute
  '/gradient': typeof GradientRoute
  '/quote': typeof QuoteRoute
  '/rock-paper-scissors': typeof RockPaperScissorsRoute
  '/stopwatch': typeof StopwatchRoute
  '/tic-tac-toe': typeof TicTacToeRoute
  '/traffic-light': typeof TrafficLightRoute
  '/whack-a-mole': typeof WhackAMoleRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dice': typeof DiceRoute
  '/gradient': typeof GradientRoute
  '/quote': typeof QuoteRoute
  '/rock-paper-scissors': typeof RockPaperScissorsRoute
  '/stopwatch': typeof StopwatchRoute
  '/tic-tac-toe': typeof TicTacToeRoute
  '/traffic-light': typeof TrafficLightRoute
  '/whack-a-mole': typeof WhackAMoleRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dice'
    | '/gradient'
    | '/quote'
    | '/rock-paper-scissors'
    | '/stopwatch'
    | '/tic-tac-toe'
    | '/traffic-light'
    | '/whack-a-mole'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dice'
    | '/gradient'
    | '/quote'
    | '/rock-paper-scissors'
    | '/stopwatch'
    | '/tic-tac-toe'
    | '/traffic-light'
    | '/whack-a-mole'
  id:
    | '__root__'
    | '/'
    | '/dice'
    | '/gradient'
    | '/quote'
    | '/rock-paper-scissors'
    | '/stopwatch'
    | '/tic-tac-toe'
    | '/traffic-light'
    | '/whack-a-mole'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DiceRoute: typeof DiceRoute
  GradientRoute: typeof GradientRoute
  QuoteRoute: typeof QuoteRoute
  RockPaperScissorsRoute: typeof RockPaperScissorsRoute
  StopwatchRoute: typeof StopwatchRoute
  TicTacToeRoute: typeof TicTacToeRoute
  TrafficLightRoute: typeof TrafficLightRoute
  WhackAMoleRoute: typeof WhackAMoleRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DiceRoute: DiceRoute,
  GradientRoute: GradientRoute,
  QuoteRoute: QuoteRoute,
  RockPaperScissorsRoute: RockPaperScissorsRoute,
  StopwatchRoute: StopwatchRoute,
  TicTacToeRoute: TicTacToeRoute,
  TrafficLightRoute: TrafficLightRoute,
  WhackAMoleRoute: WhackAMoleRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dice",
        "/gradient",
        "/quote",
        "/rock-paper-scissors",
        "/stopwatch",
        "/tic-tac-toe",
        "/traffic-light",
        "/whack-a-mole"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dice": {
      "filePath": "dice.tsx"
    },
    "/gradient": {
      "filePath": "gradient.tsx"
    },
    "/quote": {
      "filePath": "quote.tsx"
    },
    "/rock-paper-scissors": {
      "filePath": "rock-paper-scissors.tsx"
    },
    "/stopwatch": {
      "filePath": "stopwatch.tsx"
    },
    "/tic-tac-toe": {
      "filePath": "tic-tac-toe.tsx"
    },
    "/traffic-light": {
      "filePath": "traffic-light.tsx"
    },
    "/whack-a-mole": {
      "filePath": "whack-a-mole.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
